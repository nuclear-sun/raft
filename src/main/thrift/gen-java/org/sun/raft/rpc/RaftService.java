/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.sun.raft.rpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-12-01")
public class RaftService {

  public interface Iface {

    public RVResult requestVote(long term, int candidateId, long lastLogIndex, long lastLogTerm) throws org.apache.thrift.TException;

    public APResult appendEntries(long term, int leaderId, long prevLogIndex, long prevLogTerm, java.util.List<java.lang.String> entries, long leaderCommit) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void requestVote(long term, int candidateId, long lastLogIndex, long lastLogTerm, org.apache.thrift.async.AsyncMethodCallback<RVResult> resultHandler) throws org.apache.thrift.TException;

    public void appendEntries(long term, int leaderId, long prevLogIndex, long prevLogTerm, java.util.List<java.lang.String> entries, long leaderCommit, org.apache.thrift.async.AsyncMethodCallback<APResult> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public RVResult requestVote(long term, int candidateId, long lastLogIndex, long lastLogTerm) throws org.apache.thrift.TException
    {
      send_requestVote(term, candidateId, lastLogIndex, lastLogTerm);
      return recv_requestVote();
    }

    public void send_requestVote(long term, int candidateId, long lastLogIndex, long lastLogTerm) throws org.apache.thrift.TException
    {
      requestVote_args args = new requestVote_args();
      args.setTerm(term);
      args.setCandidateId(candidateId);
      args.setLastLogIndex(lastLogIndex);
      args.setLastLogTerm(lastLogTerm);
      sendBase("requestVote", args);
    }

    public RVResult recv_requestVote() throws org.apache.thrift.TException
    {
      requestVote_result result = new requestVote_result();
      receiveBase(result, "requestVote");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "requestVote failed: unknown result");
    }

    public APResult appendEntries(long term, int leaderId, long prevLogIndex, long prevLogTerm, java.util.List<java.lang.String> entries, long leaderCommit) throws org.apache.thrift.TException
    {
      send_appendEntries(term, leaderId, prevLogIndex, prevLogTerm, entries, leaderCommit);
      return recv_appendEntries();
    }

    public void send_appendEntries(long term, int leaderId, long prevLogIndex, long prevLogTerm, java.util.List<java.lang.String> entries, long leaderCommit) throws org.apache.thrift.TException
    {
      appendEntries_args args = new appendEntries_args();
      args.setTerm(term);
      args.setLeaderId(leaderId);
      args.setPrevLogIndex(prevLogIndex);
      args.setPrevLogTerm(prevLogTerm);
      args.setEntries(entries);
      args.setLeaderCommit(leaderCommit);
      sendBase("appendEntries", args);
    }

    public APResult recv_appendEntries() throws org.apache.thrift.TException
    {
      appendEntries_result result = new appendEntries_result();
      receiveBase(result, "appendEntries");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "appendEntries failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void requestVote(long term, int candidateId, long lastLogIndex, long lastLogTerm, org.apache.thrift.async.AsyncMethodCallback<RVResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      requestVote_call method_call = new requestVote_call(term, candidateId, lastLogIndex, lastLogTerm, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class requestVote_call extends org.apache.thrift.async.TAsyncMethodCall<RVResult> {
      private long term;
      private int candidateId;
      private long lastLogIndex;
      private long lastLogTerm;
      public requestVote_call(long term, int candidateId, long lastLogIndex, long lastLogTerm, org.apache.thrift.async.AsyncMethodCallback<RVResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.term = term;
        this.candidateId = candidateId;
        this.lastLogIndex = lastLogIndex;
        this.lastLogTerm = lastLogTerm;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("requestVote", org.apache.thrift.protocol.TMessageType.CALL, 0));
        requestVote_args args = new requestVote_args();
        args.setTerm(term);
        args.setCandidateId(candidateId);
        args.setLastLogIndex(lastLogIndex);
        args.setLastLogTerm(lastLogTerm);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RVResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_requestVote();
      }
    }

    public void appendEntries(long term, int leaderId, long prevLogIndex, long prevLogTerm, java.util.List<java.lang.String> entries, long leaderCommit, org.apache.thrift.async.AsyncMethodCallback<APResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      appendEntries_call method_call = new appendEntries_call(term, leaderId, prevLogIndex, prevLogTerm, entries, leaderCommit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class appendEntries_call extends org.apache.thrift.async.TAsyncMethodCall<APResult> {
      private long term;
      private int leaderId;
      private long prevLogIndex;
      private long prevLogTerm;
      private java.util.List<java.lang.String> entries;
      private long leaderCommit;
      public appendEntries_call(long term, int leaderId, long prevLogIndex, long prevLogTerm, java.util.List<java.lang.String> entries, long leaderCommit, org.apache.thrift.async.AsyncMethodCallback<APResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.term = term;
        this.leaderId = leaderId;
        this.prevLogIndex = prevLogIndex;
        this.prevLogTerm = prevLogTerm;
        this.entries = entries;
        this.leaderCommit = leaderCommit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("appendEntries", org.apache.thrift.protocol.TMessageType.CALL, 0));
        appendEntries_args args = new appendEntries_args();
        args.setTerm(term);
        args.setLeaderId(leaderId);
        args.setPrevLogIndex(prevLogIndex);
        args.setPrevLogTerm(prevLogTerm);
        args.setEntries(entries);
        args.setLeaderCommit(leaderCommit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public APResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_appendEntries();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("requestVote", new requestVote());
      processMap.put("appendEntries", new appendEntries());
      return processMap;
    }

    public static class requestVote<I extends Iface> extends org.apache.thrift.ProcessFunction<I, requestVote_args> {
      public requestVote() {
        super("requestVote");
      }

      public requestVote_args getEmptyArgsInstance() {
        return new requestVote_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public requestVote_result getResult(I iface, requestVote_args args) throws org.apache.thrift.TException {
        requestVote_result result = new requestVote_result();
        result.success = iface.requestVote(args.term, args.candidateId, args.lastLogIndex, args.lastLogTerm);
        return result;
      }
    }

    public static class appendEntries<I extends Iface> extends org.apache.thrift.ProcessFunction<I, appendEntries_args> {
      public appendEntries() {
        super("appendEntries");
      }

      public appendEntries_args getEmptyArgsInstance() {
        return new appendEntries_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public appendEntries_result getResult(I iface, appendEntries_args args) throws org.apache.thrift.TException {
        appendEntries_result result = new appendEntries_result();
        result.success = iface.appendEntries(args.term, args.leaderId, args.prevLogIndex, args.prevLogTerm, args.entries, args.leaderCommit);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("requestVote", new requestVote());
      processMap.put("appendEntries", new appendEntries());
      return processMap;
    }

    public static class requestVote<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, requestVote_args, RVResult> {
      public requestVote() {
        super("requestVote");
      }

      public requestVote_args getEmptyArgsInstance() {
        return new requestVote_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<RVResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<RVResult>() { 
          public void onComplete(RVResult o) {
            requestVote_result result = new requestVote_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            requestVote_result result = new requestVote_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, requestVote_args args, org.apache.thrift.async.AsyncMethodCallback<RVResult> resultHandler) throws org.apache.thrift.TException {
        iface.requestVote(args.term, args.candidateId, args.lastLogIndex, args.lastLogTerm,resultHandler);
      }
    }

    public static class appendEntries<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, appendEntries_args, APResult> {
      public appendEntries() {
        super("appendEntries");
      }

      public appendEntries_args getEmptyArgsInstance() {
        return new appendEntries_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<APResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<APResult>() { 
          public void onComplete(APResult o) {
            appendEntries_result result = new appendEntries_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            appendEntries_result result = new appendEntries_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, appendEntries_args args, org.apache.thrift.async.AsyncMethodCallback<APResult> resultHandler) throws org.apache.thrift.TException {
        iface.appendEntries(args.term, args.leaderId, args.prevLogIndex, args.prevLogTerm, args.entries, args.leaderCommit,resultHandler);
      }
    }

  }

  public static class requestVote_args implements org.apache.thrift.TBase<requestVote_args, requestVote_args._Fields>, java.io.Serializable, Cloneable, Comparable<requestVote_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestVote_args");

    private static final org.apache.thrift.protocol.TField TERM_FIELD_DESC = new org.apache.thrift.protocol.TField("term", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField CANDIDATE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("candidateId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField LAST_LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLogIndex", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField LAST_LOG_TERM_FIELD_DESC = new org.apache.thrift.protocol.TField("lastLogTerm", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new requestVote_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new requestVote_argsTupleSchemeFactory();

    public long term; // required
    public int candidateId; // required
    public long lastLogIndex; // required
    public long lastLogTerm; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TERM((short)1, "term"),
      CANDIDATE_ID((short)2, "candidateId"),
      LAST_LOG_INDEX((short)3, "lastLogIndex"),
      LAST_LOG_TERM((short)4, "lastLogTerm");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TERM
            return TERM;
          case 2: // CANDIDATE_ID
            return CANDIDATE_ID;
          case 3: // LAST_LOG_INDEX
            return LAST_LOG_INDEX;
          case 4: // LAST_LOG_TERM
            return LAST_LOG_TERM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TERM_ISSET_ID = 0;
    private static final int __CANDIDATEID_ISSET_ID = 1;
    private static final int __LASTLOGINDEX_ISSET_ID = 2;
    private static final int __LASTLOGTERM_ISSET_ID = 3;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TERM, new org.apache.thrift.meta_data.FieldMetaData("term", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      tmpMap.put(_Fields.CANDIDATE_ID, new org.apache.thrift.meta_data.FieldMetaData("candidateId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.LAST_LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("lastLogIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      tmpMap.put(_Fields.LAST_LOG_TERM, new org.apache.thrift.meta_data.FieldMetaData("lastLogTerm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestVote_args.class, metaDataMap);
    }

    public requestVote_args() {
    }

    public requestVote_args(
      long term,
      int candidateId,
      long lastLogIndex,
      long lastLogTerm)
    {
      this();
      this.term = term;
      setTermIsSet(true);
      this.candidateId = candidateId;
      setCandidateIdIsSet(true);
      this.lastLogIndex = lastLogIndex;
      setLastLogIndexIsSet(true);
      this.lastLogTerm = lastLogTerm;
      setLastLogTermIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestVote_args(requestVote_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.term = other.term;
      this.candidateId = other.candidateId;
      this.lastLogIndex = other.lastLogIndex;
      this.lastLogTerm = other.lastLogTerm;
    }

    public requestVote_args deepCopy() {
      return new requestVote_args(this);
    }

    @Override
    public void clear() {
      setTermIsSet(false);
      this.term = 0;
      setCandidateIdIsSet(false);
      this.candidateId = 0;
      setLastLogIndexIsSet(false);
      this.lastLogIndex = 0;
      setLastLogTermIsSet(false);
      this.lastLogTerm = 0;
    }

    public long getTerm() {
      return this.term;
    }

    public requestVote_args setTerm(long term) {
      this.term = term;
      setTermIsSet(true);
      return this;
    }

    public void unsetTerm() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TERM_ISSET_ID);
    }

    /** Returns true if field term is set (has been assigned a value) and false otherwise */
    public boolean isSetTerm() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TERM_ISSET_ID);
    }

    public void setTermIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TERM_ISSET_ID, value);
    }

    public int getCandidateId() {
      return this.candidateId;
    }

    public requestVote_args setCandidateId(int candidateId) {
      this.candidateId = candidateId;
      setCandidateIdIsSet(true);
      return this;
    }

    public void unsetCandidateId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CANDIDATEID_ISSET_ID);
    }

    /** Returns true if field candidateId is set (has been assigned a value) and false otherwise */
    public boolean isSetCandidateId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CANDIDATEID_ISSET_ID);
    }

    public void setCandidateIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CANDIDATEID_ISSET_ID, value);
    }

    public long getLastLogIndex() {
      return this.lastLogIndex;
    }

    public requestVote_args setLastLogIndex(long lastLogIndex) {
      this.lastLogIndex = lastLogIndex;
      setLastLogIndexIsSet(true);
      return this;
    }

    public void unsetLastLogIndex() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LASTLOGINDEX_ISSET_ID);
    }

    /** Returns true if field lastLogIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetLastLogIndex() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LASTLOGINDEX_ISSET_ID);
    }

    public void setLastLogIndexIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LASTLOGINDEX_ISSET_ID, value);
    }

    public long getLastLogTerm() {
      return this.lastLogTerm;
    }

    public requestVote_args setLastLogTerm(long lastLogTerm) {
      this.lastLogTerm = lastLogTerm;
      setLastLogTermIsSet(true);
      return this;
    }

    public void unsetLastLogTerm() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LASTLOGTERM_ISSET_ID);
    }

    /** Returns true if field lastLogTerm is set (has been assigned a value) and false otherwise */
    public boolean isSetLastLogTerm() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LASTLOGTERM_ISSET_ID);
    }

    public void setLastLogTermIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LASTLOGTERM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TERM:
        if (value == null) {
          unsetTerm();
        } else {
          setTerm((java.lang.Long)value);
        }
        break;

      case CANDIDATE_ID:
        if (value == null) {
          unsetCandidateId();
        } else {
          setCandidateId((java.lang.Integer)value);
        }
        break;

      case LAST_LOG_INDEX:
        if (value == null) {
          unsetLastLogIndex();
        } else {
          setLastLogIndex((java.lang.Long)value);
        }
        break;

      case LAST_LOG_TERM:
        if (value == null) {
          unsetLastLogTerm();
        } else {
          setLastLogTerm((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TERM:
        return getTerm();

      case CANDIDATE_ID:
        return getCandidateId();

      case LAST_LOG_INDEX:
        return getLastLogIndex();

      case LAST_LOG_TERM:
        return getLastLogTerm();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TERM:
        return isSetTerm();
      case CANDIDATE_ID:
        return isSetCandidateId();
      case LAST_LOG_INDEX:
        return isSetLastLogIndex();
      case LAST_LOG_TERM:
        return isSetLastLogTerm();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof requestVote_args)
        return this.equals((requestVote_args)that);
      return false;
    }

    public boolean equals(requestVote_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_term = true;
      boolean that_present_term = true;
      if (this_present_term || that_present_term) {
        if (!(this_present_term && that_present_term))
          return false;
        if (this.term != that.term)
          return false;
      }

      boolean this_present_candidateId = true;
      boolean that_present_candidateId = true;
      if (this_present_candidateId || that_present_candidateId) {
        if (!(this_present_candidateId && that_present_candidateId))
          return false;
        if (this.candidateId != that.candidateId)
          return false;
      }

      boolean this_present_lastLogIndex = true;
      boolean that_present_lastLogIndex = true;
      if (this_present_lastLogIndex || that_present_lastLogIndex) {
        if (!(this_present_lastLogIndex && that_present_lastLogIndex))
          return false;
        if (this.lastLogIndex != that.lastLogIndex)
          return false;
      }

      boolean this_present_lastLogTerm = true;
      boolean that_present_lastLogTerm = true;
      if (this_present_lastLogTerm || that_present_lastLogTerm) {
        if (!(this_present_lastLogTerm && that_present_lastLogTerm))
          return false;
        if (this.lastLogTerm != that.lastLogTerm)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(term);

      hashCode = hashCode * 8191 + candidateId;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lastLogIndex);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lastLogTerm);

      return hashCode;
    }

    @Override
    public int compareTo(requestVote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTerm()).compareTo(other.isSetTerm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTerm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.term, other.term);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCandidateId()).compareTo(other.isSetCandidateId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCandidateId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.candidateId, other.candidateId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLastLogIndex()).compareTo(other.isSetLastLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLogIndex, other.lastLogIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLastLogTerm()).compareTo(other.isSetLastLogTerm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastLogTerm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastLogTerm, other.lastLogTerm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("requestVote_args(");
      boolean first = true;

      sb.append("term:");
      sb.append(this.term);
      first = false;
      if (!first) sb.append(", ");
      sb.append("candidateId:");
      sb.append(this.candidateId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastLogIndex:");
      sb.append(this.lastLogIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastLogTerm:");
      sb.append(this.lastLogTerm);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestVote_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestVote_argsStandardScheme getScheme() {
        return new requestVote_argsStandardScheme();
      }
    }

    private static class requestVote_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<requestVote_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestVote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TERM
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.term = iprot.readI64();
                struct.setTermIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CANDIDATE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.candidateId = iprot.readI32();
                struct.setCandidateIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LAST_LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.lastLogIndex = iprot.readI64();
                struct.setLastLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // LAST_LOG_TERM
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.lastLogTerm = iprot.readI64();
                struct.setLastLogTermIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestVote_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TERM_FIELD_DESC);
        oprot.writeI64(struct.term);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CANDIDATE_ID_FIELD_DESC);
        oprot.writeI32(struct.candidateId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LAST_LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.lastLogIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LAST_LOG_TERM_FIELD_DESC);
        oprot.writeI64(struct.lastLogTerm);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestVote_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestVote_argsTupleScheme getScheme() {
        return new requestVote_argsTupleScheme();
      }
    }

    private static class requestVote_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<requestVote_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestVote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTerm()) {
          optionals.set(0);
        }
        if (struct.isSetCandidateId()) {
          optionals.set(1);
        }
        if (struct.isSetLastLogIndex()) {
          optionals.set(2);
        }
        if (struct.isSetLastLogTerm()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetTerm()) {
          oprot.writeI64(struct.term);
        }
        if (struct.isSetCandidateId()) {
          oprot.writeI32(struct.candidateId);
        }
        if (struct.isSetLastLogIndex()) {
          oprot.writeI64(struct.lastLogIndex);
        }
        if (struct.isSetLastLogTerm()) {
          oprot.writeI64(struct.lastLogTerm);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestVote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.term = iprot.readI64();
          struct.setTermIsSet(true);
        }
        if (incoming.get(1)) {
          struct.candidateId = iprot.readI32();
          struct.setCandidateIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.lastLogIndex = iprot.readI64();
          struct.setLastLogIndexIsSet(true);
        }
        if (incoming.get(3)) {
          struct.lastLogTerm = iprot.readI64();
          struct.setLastLogTermIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class requestVote_result implements org.apache.thrift.TBase<requestVote_result, requestVote_result._Fields>, java.io.Serializable, Cloneable, Comparable<requestVote_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestVote_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new requestVote_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new requestVote_resultTupleSchemeFactory();

    public RVResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RVResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestVote_result.class, metaDataMap);
    }

    public requestVote_result() {
    }

    public requestVote_result(
      RVResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestVote_result(requestVote_result other) {
      if (other.isSetSuccess()) {
        this.success = new RVResult(other.success);
      }
    }

    public requestVote_result deepCopy() {
      return new requestVote_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RVResult getSuccess() {
      return this.success;
    }

    public requestVote_result setSuccess(RVResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RVResult)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof requestVote_result)
        return this.equals((requestVote_result)that);
      return false;
    }

    public boolean equals(requestVote_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(requestVote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("requestVote_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestVote_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestVote_resultStandardScheme getScheme() {
        return new requestVote_resultStandardScheme();
      }
    }

    private static class requestVote_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<requestVote_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestVote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RVResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestVote_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestVote_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestVote_resultTupleScheme getScheme() {
        return new requestVote_resultTupleScheme();
      }
    }

    private static class requestVote_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<requestVote_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestVote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestVote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RVResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class appendEntries_args implements org.apache.thrift.TBase<appendEntries_args, appendEntries_args._Fields>, java.io.Serializable, Cloneable, Comparable<appendEntries_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("appendEntries_args");

    private static final org.apache.thrift.protocol.TField TERM_FIELD_DESC = new org.apache.thrift.protocol.TField("term", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField LEADER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("leaderId", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField PREV_LOG_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("prevLogIndex", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField PREV_LOG_TERM_FIELD_DESC = new org.apache.thrift.protocol.TField("prevLogTerm", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField ENTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entries", org.apache.thrift.protocol.TType.LIST, (short)5);
    private static final org.apache.thrift.protocol.TField LEADER_COMMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("leaderCommit", org.apache.thrift.protocol.TType.I64, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new appendEntries_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new appendEntries_argsTupleSchemeFactory();

    public long term; // required
    public int leaderId; // required
    public long prevLogIndex; // required
    public long prevLogTerm; // required
    public java.util.List<java.lang.String> entries; // required
    public long leaderCommit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TERM((short)1, "term"),
      LEADER_ID((short)2, "leaderId"),
      PREV_LOG_INDEX((short)3, "prevLogIndex"),
      PREV_LOG_TERM((short)4, "prevLogTerm"),
      ENTRIES((short)5, "entries"),
      LEADER_COMMIT((short)6, "leaderCommit");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TERM
            return TERM;
          case 2: // LEADER_ID
            return LEADER_ID;
          case 3: // PREV_LOG_INDEX
            return PREV_LOG_INDEX;
          case 4: // PREV_LOG_TERM
            return PREV_LOG_TERM;
          case 5: // ENTRIES
            return ENTRIES;
          case 6: // LEADER_COMMIT
            return LEADER_COMMIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TERM_ISSET_ID = 0;
    private static final int __LEADERID_ISSET_ID = 1;
    private static final int __PREVLOGINDEX_ISSET_ID = 2;
    private static final int __PREVLOGTERM_ISSET_ID = 3;
    private static final int __LEADERCOMMIT_ISSET_ID = 4;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TERM, new org.apache.thrift.meta_data.FieldMetaData("term", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      tmpMap.put(_Fields.LEADER_ID, new org.apache.thrift.meta_data.FieldMetaData("leaderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.PREV_LOG_INDEX, new org.apache.thrift.meta_data.FieldMetaData("prevLogIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      tmpMap.put(_Fields.PREV_LOG_TERM, new org.apache.thrift.meta_data.FieldMetaData("prevLogTerm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      tmpMap.put(_Fields.ENTRIES, new org.apache.thrift.meta_data.FieldMetaData("entries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.LEADER_COMMIT, new org.apache.thrift.meta_data.FieldMetaData("leaderCommit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "long")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(appendEntries_args.class, metaDataMap);
    }

    public appendEntries_args() {
    }

    public appendEntries_args(
      long term,
      int leaderId,
      long prevLogIndex,
      long prevLogTerm,
      java.util.List<java.lang.String> entries,
      long leaderCommit)
    {
      this();
      this.term = term;
      setTermIsSet(true);
      this.leaderId = leaderId;
      setLeaderIdIsSet(true);
      this.prevLogIndex = prevLogIndex;
      setPrevLogIndexIsSet(true);
      this.prevLogTerm = prevLogTerm;
      setPrevLogTermIsSet(true);
      this.entries = entries;
      this.leaderCommit = leaderCommit;
      setLeaderCommitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public appendEntries_args(appendEntries_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.term = other.term;
      this.leaderId = other.leaderId;
      this.prevLogIndex = other.prevLogIndex;
      this.prevLogTerm = other.prevLogTerm;
      if (other.isSetEntries()) {
        java.util.List<java.lang.String> __this__entries = new java.util.ArrayList<java.lang.String>(other.entries);
        this.entries = __this__entries;
      }
      this.leaderCommit = other.leaderCommit;
    }

    public appendEntries_args deepCopy() {
      return new appendEntries_args(this);
    }

    @Override
    public void clear() {
      setTermIsSet(false);
      this.term = 0;
      setLeaderIdIsSet(false);
      this.leaderId = 0;
      setPrevLogIndexIsSet(false);
      this.prevLogIndex = 0;
      setPrevLogTermIsSet(false);
      this.prevLogTerm = 0;
      this.entries = null;
      setLeaderCommitIsSet(false);
      this.leaderCommit = 0;
    }

    public long getTerm() {
      return this.term;
    }

    public appendEntries_args setTerm(long term) {
      this.term = term;
      setTermIsSet(true);
      return this;
    }

    public void unsetTerm() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TERM_ISSET_ID);
    }

    /** Returns true if field term is set (has been assigned a value) and false otherwise */
    public boolean isSetTerm() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TERM_ISSET_ID);
    }

    public void setTermIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TERM_ISSET_ID, value);
    }

    public int getLeaderId() {
      return this.leaderId;
    }

    public appendEntries_args setLeaderId(int leaderId) {
      this.leaderId = leaderId;
      setLeaderIdIsSet(true);
      return this;
    }

    public void unsetLeaderId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LEADERID_ISSET_ID);
    }

    /** Returns true if field leaderId is set (has been assigned a value) and false otherwise */
    public boolean isSetLeaderId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LEADERID_ISSET_ID);
    }

    public void setLeaderIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LEADERID_ISSET_ID, value);
    }

    public long getPrevLogIndex() {
      return this.prevLogIndex;
    }

    public appendEntries_args setPrevLogIndex(long prevLogIndex) {
      this.prevLogIndex = prevLogIndex;
      setPrevLogIndexIsSet(true);
      return this;
    }

    public void unsetPrevLogIndex() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PREVLOGINDEX_ISSET_ID);
    }

    /** Returns true if field prevLogIndex is set (has been assigned a value) and false otherwise */
    public boolean isSetPrevLogIndex() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PREVLOGINDEX_ISSET_ID);
    }

    public void setPrevLogIndexIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PREVLOGINDEX_ISSET_ID, value);
    }

    public long getPrevLogTerm() {
      return this.prevLogTerm;
    }

    public appendEntries_args setPrevLogTerm(long prevLogTerm) {
      this.prevLogTerm = prevLogTerm;
      setPrevLogTermIsSet(true);
      return this;
    }

    public void unsetPrevLogTerm() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PREVLOGTERM_ISSET_ID);
    }

    /** Returns true if field prevLogTerm is set (has been assigned a value) and false otherwise */
    public boolean isSetPrevLogTerm() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PREVLOGTERM_ISSET_ID);
    }

    public void setPrevLogTermIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PREVLOGTERM_ISSET_ID, value);
    }

    public int getEntriesSize() {
      return (this.entries == null) ? 0 : this.entries.size();
    }

    public java.util.Iterator<java.lang.String> getEntriesIterator() {
      return (this.entries == null) ? null : this.entries.iterator();
    }

    public void addToEntries(java.lang.String elem) {
      if (this.entries == null) {
        this.entries = new java.util.ArrayList<java.lang.String>();
      }
      this.entries.add(elem);
    }

    public java.util.List<java.lang.String> getEntries() {
      return this.entries;
    }

    public appendEntries_args setEntries(java.util.List<java.lang.String> entries) {
      this.entries = entries;
      return this;
    }

    public void unsetEntries() {
      this.entries = null;
    }

    /** Returns true if field entries is set (has been assigned a value) and false otherwise */
    public boolean isSetEntries() {
      return this.entries != null;
    }

    public void setEntriesIsSet(boolean value) {
      if (!value) {
        this.entries = null;
      }
    }

    public long getLeaderCommit() {
      return this.leaderCommit;
    }

    public appendEntries_args setLeaderCommit(long leaderCommit) {
      this.leaderCommit = leaderCommit;
      setLeaderCommitIsSet(true);
      return this;
    }

    public void unsetLeaderCommit() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LEADERCOMMIT_ISSET_ID);
    }

    /** Returns true if field leaderCommit is set (has been assigned a value) and false otherwise */
    public boolean isSetLeaderCommit() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LEADERCOMMIT_ISSET_ID);
    }

    public void setLeaderCommitIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LEADERCOMMIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TERM:
        if (value == null) {
          unsetTerm();
        } else {
          setTerm((java.lang.Long)value);
        }
        break;

      case LEADER_ID:
        if (value == null) {
          unsetLeaderId();
        } else {
          setLeaderId((java.lang.Integer)value);
        }
        break;

      case PREV_LOG_INDEX:
        if (value == null) {
          unsetPrevLogIndex();
        } else {
          setPrevLogIndex((java.lang.Long)value);
        }
        break;

      case PREV_LOG_TERM:
        if (value == null) {
          unsetPrevLogTerm();
        } else {
          setPrevLogTerm((java.lang.Long)value);
        }
        break;

      case ENTRIES:
        if (value == null) {
          unsetEntries();
        } else {
          setEntries((java.util.List<java.lang.String>)value);
        }
        break;

      case LEADER_COMMIT:
        if (value == null) {
          unsetLeaderCommit();
        } else {
          setLeaderCommit((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TERM:
        return getTerm();

      case LEADER_ID:
        return getLeaderId();

      case PREV_LOG_INDEX:
        return getPrevLogIndex();

      case PREV_LOG_TERM:
        return getPrevLogTerm();

      case ENTRIES:
        return getEntries();

      case LEADER_COMMIT:
        return getLeaderCommit();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TERM:
        return isSetTerm();
      case LEADER_ID:
        return isSetLeaderId();
      case PREV_LOG_INDEX:
        return isSetPrevLogIndex();
      case PREV_LOG_TERM:
        return isSetPrevLogTerm();
      case ENTRIES:
        return isSetEntries();
      case LEADER_COMMIT:
        return isSetLeaderCommit();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof appendEntries_args)
        return this.equals((appendEntries_args)that);
      return false;
    }

    public boolean equals(appendEntries_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_term = true;
      boolean that_present_term = true;
      if (this_present_term || that_present_term) {
        if (!(this_present_term && that_present_term))
          return false;
        if (this.term != that.term)
          return false;
      }

      boolean this_present_leaderId = true;
      boolean that_present_leaderId = true;
      if (this_present_leaderId || that_present_leaderId) {
        if (!(this_present_leaderId && that_present_leaderId))
          return false;
        if (this.leaderId != that.leaderId)
          return false;
      }

      boolean this_present_prevLogIndex = true;
      boolean that_present_prevLogIndex = true;
      if (this_present_prevLogIndex || that_present_prevLogIndex) {
        if (!(this_present_prevLogIndex && that_present_prevLogIndex))
          return false;
        if (this.prevLogIndex != that.prevLogIndex)
          return false;
      }

      boolean this_present_prevLogTerm = true;
      boolean that_present_prevLogTerm = true;
      if (this_present_prevLogTerm || that_present_prevLogTerm) {
        if (!(this_present_prevLogTerm && that_present_prevLogTerm))
          return false;
        if (this.prevLogTerm != that.prevLogTerm)
          return false;
      }

      boolean this_present_entries = true && this.isSetEntries();
      boolean that_present_entries = true && that.isSetEntries();
      if (this_present_entries || that_present_entries) {
        if (!(this_present_entries && that_present_entries))
          return false;
        if (!this.entries.equals(that.entries))
          return false;
      }

      boolean this_present_leaderCommit = true;
      boolean that_present_leaderCommit = true;
      if (this_present_leaderCommit || that_present_leaderCommit) {
        if (!(this_present_leaderCommit && that_present_leaderCommit))
          return false;
        if (this.leaderCommit != that.leaderCommit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(term);

      hashCode = hashCode * 8191 + leaderId;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(prevLogIndex);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(prevLogTerm);

      hashCode = hashCode * 8191 + ((isSetEntries()) ? 131071 : 524287);
      if (isSetEntries())
        hashCode = hashCode * 8191 + entries.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(leaderCommit);

      return hashCode;
    }

    @Override
    public int compareTo(appendEntries_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTerm()).compareTo(other.isSetTerm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTerm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.term, other.term);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLeaderId()).compareTo(other.isSetLeaderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLeaderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leaderId, other.leaderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPrevLogIndex()).compareTo(other.isSetPrevLogIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrevLogIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prevLogIndex, other.prevLogIndex);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPrevLogTerm()).compareTo(other.isSetPrevLogTerm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrevLogTerm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.prevLogTerm, other.prevLogTerm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEntries()).compareTo(other.isSetEntries());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntries()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entries, other.entries);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLeaderCommit()).compareTo(other.isSetLeaderCommit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLeaderCommit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leaderCommit, other.leaderCommit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("appendEntries_args(");
      boolean first = true;

      sb.append("term:");
      sb.append(this.term);
      first = false;
      if (!first) sb.append(", ");
      sb.append("leaderId:");
      sb.append(this.leaderId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("prevLogIndex:");
      sb.append(this.prevLogIndex);
      first = false;
      if (!first) sb.append(", ");
      sb.append("prevLogTerm:");
      sb.append(this.prevLogTerm);
      first = false;
      if (!first) sb.append(", ");
      sb.append("entries:");
      if (this.entries == null) {
        sb.append("null");
      } else {
        sb.append(this.entries);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("leaderCommit:");
      sb.append(this.leaderCommit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class appendEntries_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public appendEntries_argsStandardScheme getScheme() {
        return new appendEntries_argsStandardScheme();
      }
    }

    private static class appendEntries_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<appendEntries_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, appendEntries_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TERM
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.term = iprot.readI64();
                struct.setTermIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LEADER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.leaderId = iprot.readI32();
                struct.setLeaderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PREV_LOG_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.prevLogIndex = iprot.readI64();
                struct.setPrevLogIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PREV_LOG_TERM
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.prevLogTerm = iprot.readI64();
                struct.setPrevLogTermIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ENTRIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.entries = new java.util.ArrayList<java.lang.String>(_list0.size);
                  java.lang.String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.entries.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setEntriesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // LEADER_COMMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.leaderCommit = iprot.readI64();
                struct.setLeaderCommitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, appendEntries_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TERM_FIELD_DESC);
        oprot.writeI64(struct.term);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LEADER_ID_FIELD_DESC);
        oprot.writeI32(struct.leaderId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PREV_LOG_INDEX_FIELD_DESC);
        oprot.writeI64(struct.prevLogIndex);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PREV_LOG_TERM_FIELD_DESC);
        oprot.writeI64(struct.prevLogTerm);
        oprot.writeFieldEnd();
        if (struct.entries != null) {
          oprot.writeFieldBegin(ENTRIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.entries.size()));
            for (java.lang.String _iter3 : struct.entries)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LEADER_COMMIT_FIELD_DESC);
        oprot.writeI64(struct.leaderCommit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class appendEntries_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public appendEntries_argsTupleScheme getScheme() {
        return new appendEntries_argsTupleScheme();
      }
    }

    private static class appendEntries_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<appendEntries_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, appendEntries_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTerm()) {
          optionals.set(0);
        }
        if (struct.isSetLeaderId()) {
          optionals.set(1);
        }
        if (struct.isSetPrevLogIndex()) {
          optionals.set(2);
        }
        if (struct.isSetPrevLogTerm()) {
          optionals.set(3);
        }
        if (struct.isSetEntries()) {
          optionals.set(4);
        }
        if (struct.isSetLeaderCommit()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetTerm()) {
          oprot.writeI64(struct.term);
        }
        if (struct.isSetLeaderId()) {
          oprot.writeI32(struct.leaderId);
        }
        if (struct.isSetPrevLogIndex()) {
          oprot.writeI64(struct.prevLogIndex);
        }
        if (struct.isSetPrevLogTerm()) {
          oprot.writeI64(struct.prevLogTerm);
        }
        if (struct.isSetEntries()) {
          {
            oprot.writeI32(struct.entries.size());
            for (java.lang.String _iter4 : struct.entries)
            {
              oprot.writeString(_iter4);
            }
          }
        }
        if (struct.isSetLeaderCommit()) {
          oprot.writeI64(struct.leaderCommit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, appendEntries_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.term = iprot.readI64();
          struct.setTermIsSet(true);
        }
        if (incoming.get(1)) {
          struct.leaderId = iprot.readI32();
          struct.setLeaderIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.prevLogIndex = iprot.readI64();
          struct.setPrevLogIndexIsSet(true);
        }
        if (incoming.get(3)) {
          struct.prevLogTerm = iprot.readI64();
          struct.setPrevLogTermIsSet(true);
        }
        if (incoming.get(4)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.entries = new java.util.ArrayList<java.lang.String>(_list5.size);
            java.lang.String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.entries.add(_elem6);
            }
          }
          struct.setEntriesIsSet(true);
        }
        if (incoming.get(5)) {
          struct.leaderCommit = iprot.readI64();
          struct.setLeaderCommitIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class appendEntries_result implements org.apache.thrift.TBase<appendEntries_result, appendEntries_result._Fields>, java.io.Serializable, Cloneable, Comparable<appendEntries_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("appendEntries_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new appendEntries_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new appendEntries_resultTupleSchemeFactory();

    public APResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, APResult.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(appendEntries_result.class, metaDataMap);
    }

    public appendEntries_result() {
    }

    public appendEntries_result(
      APResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public appendEntries_result(appendEntries_result other) {
      if (other.isSetSuccess()) {
        this.success = new APResult(other.success);
      }
    }

    public appendEntries_result deepCopy() {
      return new appendEntries_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public APResult getSuccess() {
      return this.success;
    }

    public appendEntries_result setSuccess(APResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((APResult)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof appendEntries_result)
        return this.equals((appendEntries_result)that);
      return false;
    }

    public boolean equals(appendEntries_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(appendEntries_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("appendEntries_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class appendEntries_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public appendEntries_resultStandardScheme getScheme() {
        return new appendEntries_resultStandardScheme();
      }
    }

    private static class appendEntries_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<appendEntries_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, appendEntries_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new APResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, appendEntries_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class appendEntries_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public appendEntries_resultTupleScheme getScheme() {
        return new appendEntries_resultTupleScheme();
      }
    }

    private static class appendEntries_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<appendEntries_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, appendEntries_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, appendEntries_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new APResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
